Index: application/src/main/java/com/good/gd/webview_V2/bbwebview/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2020 BlackBerry Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.good.gd.webview_V2.bbwebview;\n\nimport android.net.Uri;\nimport android.util.Log;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class Utils {\n\n    static public class Strings {\n        static public final boolean isNullOrEmpty(String str) {\n            return str == null || str.isEmpty();\n        }\n    }\n\n    static public class URL{\n        static public Uri encodeUrl(Uri urlDecoded) {\n\n            try {\n                final String scheme = urlDecoded.getScheme();\n                final String schemeSuffix = \"://\";\n                final String domain = urlDecoded.getAuthority();// port included\n                StringBuilder path = new StringBuilder();\n\n\n                List<String> pathSegments = urlDecoded.getPathSegments();\n                for (String pathSegment : pathSegments) {\n                    if(!Utils.Strings.isNullOrEmpty(pathSegment)){\n                        path.append(\"/\");\n                        path.append(Uri.encode(pathSegment));\n\n                    }\n                }\n\n                final String queryPrefix = \"?\";\n                String queryDecoded = urlDecoded.getQuery();\n\n                String query = \"\";\n                if(!Utils.Strings.isNullOrEmpty(queryDecoded)) {\n\n                    Set<String> queryParamsKeys = urlDecoded.getQueryParameterNames();\n\n                    StringBuilder queryBuilder = new StringBuilder();\n\n                    boolean firstParamAppended = false;\n                    for (String queryParamsKey : queryParamsKeys) {\n                        String queryParameterVal = urlDecoded.getQueryParameter(queryParamsKey);\n\n                        if(!firstParamAppended){\n                            firstParamAppended = true;\n                        }else {\n                            queryBuilder.append(\"&\");\n                        }\n\n                        queryBuilder.append(Uri.encode(queryParamsKey)).append(\"=\").append(Uri.encode(queryParameterVal));\n                    }\n\n                    query = queryBuilder.toString();\n                }\n\n                final String fragmentPrefix = \"#\";\n\n                String fragmentDecoded = urlDecoded.getFragment();\n                String fragment = null;\n                if(!Utils.Strings.isNullOrEmpty(fragmentDecoded)) {\n                    fragment = Uri.encode(fragmentDecoded);\n                }\n\n\n\n                StringBuilder urlBuilder = new StringBuilder();\n\n                urlBuilder.append(scheme)\n                        .append(schemeSuffix)\n                        .append(domain)\n                        .append(path.toString());\n\n                if(!Utils.Strings.isNullOrEmpty(query)){\n                    urlBuilder.append(queryPrefix)\n                            .append(query);\n                }\n\n                if(!Utils.Strings.isNullOrEmpty(fragment)){\n                    urlBuilder.append(fragmentPrefix)\n                            .append(fragment);\n                }\n\n                return Uri.parse(urlBuilder.toString());\n\n\n            } catch (Exception e){\n                Log.e(\"Utils.URL\", \"ERROR encodeUrl \" + urlDecoded.toString(), e);\n            }\n\n            Log.e(\"Utils.URL\", \"ERROR encodeUrl couldn't decode: \" + urlDecoded.toString());\n            return urlDecoded;\n        }\n\n\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- application/src/main/java/com/good/gd/webview_V2/bbwebview/Utils.java	(revision f837e01a124b67215767145ade294b228d3d2778)
+++ application/src/main/java/com/good/gd/webview_V2/bbwebview/Utils.java	(date 1585090665000)
@@ -20,7 +20,10 @@
 import android.util.Log;
 
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public class Utils {
 
@@ -112,6 +115,26 @@
             Log.e("Utils.URL", "ERROR encodeUrl couldn't decode: " + urlDecoded.toString());
             return urlDecoded;
         }
+    }
+
+    public enum PubSub{
+
+        INSTANCE;
+
+        public interface Publisher<T> {
+            void regSub(T t);
+        }
+
+        private static Map<Class<?>, Publisher<?>> publishers = new ConcurrentHashMap<>();
+        private static Map<Class<?>, List<? extends Object>> subs = new ConcurrentHashMap<>();
+
+        synchronized public <T> void pub(Publisher<T> publisher, Class<? extends T> clyasa){
+            publishers.put(clyasa,publisher);
+
+            for (Object subsForClass : subs.getOrDefault(clyasa,new CopyOnWriteArrayList<T>())) {
+                publisher.regSub((T) subsForClass);
+            }
+        }
 
 
 
Index: application/src/main/java/com/good/gd/webview_V2/bbwebview/BBResponseInputStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2020 BlackBerry Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.good.gd.webview_V2.bbwebview;\n\nimport android.util.Log;\n\nimport com.good.gd.apache.http.Header;\nimport com.good.gd.apache.http.HeaderElement;\nimport com.good.gd.apache.http.HttpEntity;\nimport com.good.gd.apache.http.HttpResponse;\nimport com.good.gd.apache.http.StatusLine;\n\nimport org.brotli.dec.BrotliInputStream;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.InflaterInputStream;\n\npublic class BBResponseInputStream extends InputStream {\n\n\n    Future<HttpResponse> futureIS;\n    InputStream contentStream = null;\n    HttpResponse response = null;\n    final AtomicBoolean reponseIsAvailable = new AtomicBoolean(false);\n\n    public BBResponseInputStream(Future<HttpResponse> futureIS) {\n        this.futureIS = futureIS;\n    }\n\n\n    @Override\n    public int read() throws IOException {\n\n\n        try {\n            if (!reponseIsAvailable.get()) {\n                try {\n                    response = futureIS.get();\n                } catch (Exception e) {\n                    Log.w(\"BBResponseInputStream\", \"response promise failed\");\n                }\n\n                reponseIsAvailable.set(true);\n\n                if (response != null) {\n\n                    StatusLine statusLine = response.getStatusLine();\n                    Header[] allHeaders = response.getAllHeaders();\n\n                    Log.i(\"BBResponseInputStream\", \"read() initial status line: \" + statusLine);\n                    Log.i(\"BBResponseInputStream\", \"read() initial headers: \" + Arrays.toString(allHeaders));\n\n\n                    HttpEntity responseEntity = response.getEntity();\n                    if (responseEntity != null) {\n                        Log.i(\"BBResponseInputStream\", \"read() initial body PRESENT\");\n                        contentStream = responseEntity.getContent();\n\n\n                        String contentEncoding = null;\n                        for (int i = 0; i < allHeaders.length; i++) {\n                            Header header = allHeaders[i];\n\n                            if(\"content-encoding\".equalsIgnoreCase(header.getName()) ){\n                                contentEncoding = header.getValue();\n                            }\n                        }\n\n                        Header contentEncodingElements = responseEntity.getContentEncoding();\n                        if(contentEncodingElements != null) {\n                            HeaderElement[] elements = contentEncodingElements.getElements();\n                            for (int i = 0; i < elements.length; i++) {\n                                HeaderElement element = elements[i];\n                                if(element != null && element.getValue() != null) {\n                                    if (Arrays.asList(\"gzip\", \"deflate\", \"br\").contains(element.getValue().toLowerCase())) {\n                                        contentEncoding = element.getValue().toLowerCase();\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                        if(\"gzip\".equalsIgnoreCase(contentEncoding)) {\n                            contentStream = new GZIPInputStream(contentStream);\n                        } else\n                        if(\"deflate\".equalsIgnoreCase(contentEncoding)) {\n                            contentStream = new InflaterInputStream(contentStream);\n                        } else if(\"br\".equalsIgnoreCase(contentEncoding)){\n                            contentStream = new BrotliInputStream(contentStream);\n                        } else {\n                            Log.w(\"BBResponseInputStream\", \"read() content-encoding \" + contentEncoding + \" unhandled\");\n                        }\n\n\n                    } else {\n                        Log.w(\"BBResponseInputStream\", \"read() initial NO body PRESENT\");\n                    }\n\n                } else {\n                    Log.w(\"BBResponseInputStream\", \"read() NO response\");\n                }\n            }\n\n            if (contentStream == null) {\n                return -1;\n            }\n\n\n            InputStream inputStream = contentStream;\n            return inputStream.read();\n        } catch (IOException e) {\n            Log.e(\"BBResponseInputStream\", \"read() ERROR1\", e);\n            throw e;\n        } catch (Exception e) {\n            Log.e(\"BBResponseInputStream\", \"read() ERROR2\", e);\n        }\n\n        return -1;\n    }\n\n    @Override\n    public void close() throws IOException {\n        Log.i(\"BBResponseInputStream\", \"close() called\");\n\n\n        super.close();\n\n        if(contentStream != null) {\n            try {\n                contentStream.close();\n                Log.i(\"BBResponseInputStream\", \"contentStream.close() called\");\n            } catch (IOException e) {\n                Log.e(\"BBResponseInputStream\", \"contentStream.close() call exception\",e);\n            }\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- application/src/main/java/com/good/gd/webview_V2/bbwebview/BBResponseInputStream.java	(revision f837e01a124b67215767145ade294b228d3d2778)
+++ application/src/main/java/com/good/gd/webview_V2/bbwebview/BBResponseInputStream.java	(date 1586488851000)
@@ -49,8 +49,6 @@
 
     @Override
     public int read() throws IOException {
-
-
         try {
             if (!reponseIsAvailable.get()) {
                 try {
@@ -154,4 +152,29 @@
         }
 
     }
+
+
+    public interface Callbacks{
+        void onRead(int byteRead);
+    }
+
+//    private class CallbacksToListDelegate implements Callbacks{
+//
+//        Executor dispatcher = Executors.newCachedThreadPool();
+//
+//        @Override
+//        public void onRead(final int byteRead) {
+//            for (final Callbacks cb : cbList) {
+//                dispatcher.execute(new Runnable() {
+//                    @Override
+//                    public void run() {
+//                        cb.onRead(byteRead);
+//                    }
+//                });
+//            }
+//        }
+//    }
+//
+//    private final List<Callbacks> cbList = new CopyOnWriteArrayList<>();
+//    private final Callbacks callbacksInternal = new CallbacksToListDelegate();
 }
